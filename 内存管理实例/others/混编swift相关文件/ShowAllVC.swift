//
//  ShowAllVC.swift
//  内存管理实例
//
//  Created by 汪俊 on 2018/5/11.
//  Copyright © 2018年 汪俊. All rights reserved.
//

import UIKit

class ShowAllVC: UIViewController {
    
//    首先引用计数方面都基于现在使用的ARC -
//    ARC 苹果版本的自动内存管理的编译时间特性。它代表了自动引用计数(Automatic Reference Counting)。也就是对于一个对象来说，只有在引用计数为0的情况下内存才会被释放。
//    这些基本都是一样的，那么就讲一些不一样的吧
//    Swift采用了和Objective - C相同的ARC机制来管理内存，大部分时候内存问题不需要我们关心，基本上做到内存自动管理。基本规则是这样的：当一个对象的引用计数为0的时候，这个对象就会被释放/自动回收。所以在我们编码的过程中如果需要手动释放一个对象，只需要将对象置为nil即可。但是Swift和Objective - C一样，会遇到循环引用等内存问题。
    
//    Strong（强引用）
//    让我们从什么是强引用说起。它实质上就是普通的引用(指针等等)，但是它的特殊之处在于它能够通过使对象的引用计数+1来保护对象，避免引用对象被ARC机制销毁。本质上来讲，任何对象只要有强引用，它就不会被销毁掉。记住这点对我接下来要讲的引用循环等其他知识来说很重要。
//    强引用在swift中无处不在。事实上，当你声明一个属性时，它就默认是一个强引用。一般来说，当对象之间的关系为线性时，使用强引用是安全的。当对象之间的强引用是从父层级流向子层级时，用强引用通常也是ok的。
}
